//$Header: /as2/de/mendelson/comm/as2/preferences/PreferencesPanelMDN.java 16    28.01.20 15:30 Heller $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel to define the MDN preferences
 *
 * @author S.Heller
 * @version: $Revision: 16 $
 */
public class PreferencesPanelMDN extends PreferencesPanel {

    /**
     * Localize the GUI
     */
    private MecResourceBundle rb = null;

    protected final static MendelsonMultiResolutionImage IMAGE_PREFS
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/preferences.svg", 
                    JDialogPreferences.IMAGE_HEIGHT, JDialogPreferences.IMAGE_HEIGHT*2);
    
    /**
     * GUI prefs
     */
    private PreferencesClient preferences;

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelMDN(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
    }

    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jTextFieldAsyncMDNTimeout.setText(this.preferences.get(PreferencesAS2.ASYNC_MDN_TIMEOUT));
        this.jTextFieldSendHttpTimeout.setText(this.preferences.get(PreferencesAS2.HTTP_SEND_TIMEOUT));
        this.jTexFieldRetryCount.setText(this.preferences.get(PreferencesAS2.MAX_CONNECTION_RETRY_COUNT));
        this.jTextFieldRetryWaittime.setText(this.preferences.get(PreferencesAS2.CONNECTION_RETRY_WAIT_TIME_IN_S));
        this.jTextFieldOutboundConnections.setText(this.preferences.get(PreferencesAS2.MAX_OUTBOUND_CONNECTIONS));
    }

    /**
     * Stores the preferences once the ok button has been pressed
     */
    @Override
    public void savePreferences() {
        try {
            int value = Integer.valueOf(this.jTextFieldSendHttpTimeout.getText().trim()).intValue();
            this.preferences.putInt(PreferencesAS2.HTTP_SEND_TIMEOUT, value);
        } catch (NumberFormatException e) {
            //nop
        }
        try {
            int value = Integer.valueOf(this.jTextFieldAsyncMDNTimeout.getText().trim()).intValue();
            this.preferences.putInt(PreferencesAS2.ASYNC_MDN_TIMEOUT, value);
        } catch (NumberFormatException e) {
            //nop
        }
        try {
            int value = Integer.valueOf(this.jTexFieldRetryCount.getText().trim()).intValue();
            this.preferences.putInt(PreferencesAS2.MAX_CONNECTION_RETRY_COUNT, value);
        } catch (NumberFormatException e) {
            //nop
        }
        try {
            int value = Integer.valueOf(this.jTextFieldRetryWaittime.getText().trim()).intValue();
            this.preferences.putInt(PreferencesAS2.CONNECTION_RETRY_WAIT_TIME_IN_S, value);
        } catch (NumberFormatException e) {
            //nop
        }
        try {
            int value = Integer.valueOf(this.jTextFieldOutboundConnections.getText().trim()).intValue();
            this.preferences.putInt(PreferencesAS2.MAX_OUTBOUND_CONNECTIONS, value);
        } catch (NumberFormatException e) {
            //nop
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMargin = new javax.swing.JPanel();
        jLabelMinutes = new javax.swing.JLabel();
        jPanelSpace = new javax.swing.JPanel();
        jLabelAsyncMDNTimeout = new javax.swing.JLabel();
        jTextFieldSendHttpTimeout = new javax.swing.JTextField();
        jLabelHttpSendTimeout = new javax.swing.JLabel();
        jTextFieldAsyncMDNTimeout = new javax.swing.JTextField();
        jLabelMilliseconds = new javax.swing.JLabel();
        jLabelConnectionRetryCount = new javax.swing.JLabel();
        jTexFieldRetryCount = new javax.swing.JTextField();
        jLabelConnectionRetryTime = new javax.swing.JLabel();
        jTextFieldRetryWaittime = new javax.swing.JTextField();
        jLabelSeconds = new javax.swing.JLabel();
        jLabelOutboundConnections = new javax.swing.JLabel();
        jTextFieldOutboundConnections = new javax.swing.JTextField();

        setLayout(new java.awt.GridBagLayout());

        jPanelMargin.setLayout(new java.awt.GridBagLayout());

        jLabelMinutes.setText(this.rb.getResourceString( "label.min"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jLabelMinutes, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 18;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weighty = 1.0;
        jPanelMargin.add(jPanelSpace, gridBagConstraints);

        jLabelAsyncMDNTimeout.setText(this.rb.getResourceString( "label.asyncmdn.timeout"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jLabelAsyncMDNTimeout, gridBagConstraints);

        jTextFieldSendHttpTimeout.setMinimumSize(new java.awt.Dimension(50, 20));
        jTextFieldSendHttpTimeout.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jPanelMargin.add(jTextFieldSendHttpTimeout, gridBagConstraints);

        jLabelHttpSendTimeout.setText(this.rb.getResourceString( "label.httpsend.timeout"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 15, 5);
        jPanelMargin.add(jLabelHttpSendTimeout, gridBagConstraints);

        jTextFieldAsyncMDNTimeout.setMinimumSize(new java.awt.Dimension(50, 20));
        jTextFieldAsyncMDNTimeout.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jTextFieldAsyncMDNTimeout, gridBagConstraints);

        jLabelMilliseconds.setText("ms");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 15, 5);
        jPanelMargin.add(jLabelMilliseconds, gridBagConstraints);

        jLabelConnectionRetryCount.setText(this.rb.getResourceString( "label.retry.max"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jLabelConnectionRetryCount, gridBagConstraints);

        jTexFieldRetryCount.setMinimumSize(new java.awt.Dimension(50, 20));
        jTexFieldRetryCount.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jTexFieldRetryCount, gridBagConstraints);

        jLabelConnectionRetryTime.setText(this.rb.getResourceString( "label.retry.waittime"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jLabelConnectionRetryTime, gridBagConstraints);

        jTextFieldRetryWaittime.setMinimumSize(new java.awt.Dimension(50, 20));
        jTextFieldRetryWaittime.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jTextFieldRetryWaittime, gridBagConstraints);

        jLabelSeconds.setText(this.rb.getResourceString( "label.sec"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        jPanelMargin.add(jLabelSeconds, gridBagConstraints);

        jLabelOutboundConnections.setText(this.rb.getResourceString("label.max.outboundconnections"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jLabelOutboundConnections, gridBagConstraints);

        jTextFieldOutboundConnections.setMinimumSize(new java.awt.Dimension(50, 20));
        jTextFieldOutboundConnections.setPreferredSize(new java.awt.Dimension(50, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jTextFieldOutboundConnections, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelMargin, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelAsyncMDNTimeout;
    private javax.swing.JLabel jLabelConnectionRetryCount;
    private javax.swing.JLabel jLabelConnectionRetryTime;
    private javax.swing.JLabel jLabelHttpSendTimeout;
    private javax.swing.JLabel jLabelMilliseconds;
    private javax.swing.JLabel jLabelMinutes;
    private javax.swing.JLabel jLabelOutboundConnections;
    private javax.swing.JLabel jLabelSeconds;
    private javax.swing.JPanel jPanelMargin;
    private javax.swing.JPanel jPanelSpace;
    private javax.swing.JTextField jTexFieldRetryCount;
    private javax.swing.JTextField jTextFieldAsyncMDNTimeout;
    private javax.swing.JTextField jTextFieldOutboundConnections;
    private javax.swing.JTextField jTextFieldRetryWaittime;
    private javax.swing.JTextField jTextFieldSendHttpTimeout;
    // End of variables declaration//GEN-END:variables

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon( IMAGE_PREFS ));                
    }

    @Override
    public String getTabResource() {
        return ("tab.misc");
    }

}
