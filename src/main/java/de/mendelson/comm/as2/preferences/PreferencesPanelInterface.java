//$Header: /mec_as2/de/mendelson/comm/as2/preferences/PreferencesPanelInterface.java 2     10.01.20 15:41 Heller $
package de.mendelson.comm.as2.preferences;
import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 *Panel to define the interface preferences
 * @author S.Heller
 * @version: $Revision: 2 $
 */
public class PreferencesPanelInterface extends PreferencesPanel {
    
        private final static MendelsonMultiResolutionImage ICON_INTERFACE
            = MendelsonMultiResolutionImage.fromSVG("/comm/as2/preferences/interface.svg", 
                    JDialogPreferences.IMAGE_HEIGHT, JDialogPreferences.IMAGE_HEIGHT*2);

    
    /**Localize the GUI*/
    private MecResourceBundle rb = null;
    
    /**GUI prefs*/
    private PreferencesClient preferences;
    
    /** Creates new form PreferencesPanelDirectories */
    public PreferencesPanelInterface(BaseClient baseClient) {
        //load resource bundle
        try{
            this.rb = (MecResourceBundle)ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName() );
        } catch ( MissingResourceException e ) {
            throw new RuntimeException( "Oops..resource bundle "
                    + e.getClassName() + " not found." );
        }
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
    }
    
    /**Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences(){
        this.jCheckBoxCEM.setSelected( this.preferences.getBoolean( PreferencesAS2.CEM ));
        this.jCheckBoxOutboundStatusFiles.setSelected( this.preferences.getBoolean( PreferencesAS2.WRITE_OUTBOUND_STATUS_FILE ));
    }

    private void settingsChanged(){
        
    }
    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelSpace = new javax.swing.JPanel();
        jCheckBoxCEM = new javax.swing.JCheckBox();
        jCheckBoxOutboundStatusFiles = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanelSpace, gridBagConstraints);

        jCheckBoxCEM.setText(this.rb.getResourceString( "label.cem" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jCheckBoxCEM, gridBagConstraints);

        jCheckBoxOutboundStatusFiles.setText(this.rb.getResourceString( "label.outboundstatusfiles" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jCheckBoxOutboundStatusFiles, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
            
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxCEM;
    private javax.swing.JCheckBox jCheckBoxOutboundStatusFiles;
    private javax.swing.JPanel jPanelSpace;
    // End of variables declaration//GEN-END:variables
   

    @Override
    public void savePreferences() {
        this.preferences.putBoolean(PreferencesAS2.CEM, this.jCheckBoxCEM.isSelected() );
        this.preferences.putBoolean(PreferencesAS2.WRITE_OUTBOUND_STATUS_FILE, this.jCheckBoxOutboundStatusFiles.isSelected() );
    }

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon( ICON_INTERFACE ));                
    }

    @Override
    public String getTabResource() {
        return( "tab.interface" );
    }
    
}
