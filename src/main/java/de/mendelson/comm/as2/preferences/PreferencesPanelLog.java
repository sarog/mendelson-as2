//$Header: /as2/de/mendelson/comm/as2/preferences/PreferencesPanelLog.java 5     5.11.19 10:45 Heller $
package de.mendelson.comm.as2.preferences;

import de.mendelson.util.MecResourceBundle;
import de.mendelson.util.MendelsonMultiResolutionImage;
import de.mendelson.util.clientserver.BaseClient;
import de.mendelson.util.clientserver.clients.preferences.PreferencesClient;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import javax.swing.ImageIcon;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 * Panel to define special log events
 *
 * @author S.Heller
 * @version: $Revision: 5 $
 */
public class PreferencesPanelLog extends PreferencesPanel {

    private final static MendelsonMultiResolutionImage ICON_LOG
            = MendelsonMultiResolutionImage.fromSVG("/de/mendelson/comm/as2/preferences/log.svg", 
                    JDialogPreferences.IMAGE_HEIGHT, JDialogPreferences.IMAGE_HEIGHT*2);
    
    /**
     * Localize the GUI
     */
    private MecResourceBundle rb = null;

    /**
     * GUI prefs
     */
    private PreferencesClient preferences;

    /**
     * Creates new form PreferencesPanelDirectories
     */
    public PreferencesPanelLog(BaseClient baseClient) {
        //load resource bundle
        try {
            this.rb = (MecResourceBundle) ResourceBundle.getBundle(
                    ResourceBundlePreferences.class.getName());
        } catch (MissingResourceException e) {
            throw new RuntimeException("Oops..resource bundle "
                    + e.getClassName() + " not found.");
        }
        this.preferences = new PreferencesClient(baseClient);
        this.initComponents();
    }

    /**
     * Sets new preferences to this panel to changes/modify
     */
    @Override
    public void loadPreferences() {
        this.jCheckBoxLogAutoMessageDelete.setSelected(this.preferences.getBoolean(PreferencesAS2.AUTO_MSG_DELETE_LOG));
        this.jCheckBoxLogPollProcess.setSelected(this.preferences.getBoolean(PreferencesAS2.LOG_POLL_PROCESS));
    }

    private void settingsChanged() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelMargin = new javax.swing.JPanel();
        jPanelSpace = new javax.swing.JPanel();
        jCheckBoxLogAutoMessageDelete = new javax.swing.JCheckBox();
        jCheckBoxLogPollProcess = new javax.swing.JCheckBox();

        setLayout(new java.awt.GridBagLayout());

        jPanelMargin.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelMargin.add(jPanelSpace, gridBagConstraints);

        jCheckBoxLogAutoMessageDelete.setText(this.rb.getResourceString( "label.deletemsglog"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(20, 5, 5, 5);
        jPanelMargin.add(jCheckBoxLogAutoMessageDelete, gridBagConstraints);

        jCheckBoxLogPollProcess.setText(this.rb.getResourceString( "label.logpollprocess" ));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelMargin.add(jCheckBoxLogPollProcess, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanelMargin, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBoxLogAutoMessageDelete;
    private javax.swing.JCheckBox jCheckBoxLogPollProcess;
    private javax.swing.JPanel jPanelMargin;
    private javax.swing.JPanel jPanelSpace;
    // End of variables declaration//GEN-END:variables

    @Override
    public void savePreferences() {
        this.preferences.putBoolean(PreferencesAS2.LOG_POLL_PROCESS, this.jCheckBoxLogPollProcess.isSelected());
        this.preferences.putBoolean(PreferencesAS2.AUTO_MSG_DELETE_LOG, this.jCheckBoxLogAutoMessageDelete.isSelected());
    }

    @Override
    public ImageIcon getIcon() {
        return (new ImageIcon( ICON_LOG ));
                
    }

    @Override
    public String getTabResource() {
        return ("tab.log");
    }

}
