#
# Create a new as2 RUNTIME server database and initialize it
# $Author: heller $
# $Revision: 1.2 $
#
# Create table for update and version control
#
CREATE TABLE version(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,actualversion INTEGER,updatedate TIMESTAMP,updatecomment VARCHAR(255));
#
# Message details
#
CREATE TABLE messages(messageid VARCHAR(255) PRIMARY KEY,initdateutc TIMESTAMP,senddateutc TIMESTAMP,direction INTEGER,rawfilename VARCHAR(512),state INTEGER,signature INTEGER,encryption INTEGER,senderid VARCHAR(255),receiverid VARCHAR(255),syncmdn INTEGER,headerfilename VARCHAR(512),rawdecryptedfilename VARCHAR(512),senderhost VARCHAR(255),useragent VARCHAR(255),contentmic VARCHAR(255),msgcompression INT DEFAULT 0 NOT NULL,messagetype INT DEFAULT 1 NOT NULL,asyncmdnurl VARCHAR(512),msgsubject VARCHAR(255),resendcounter INT DEFAULT 0 NOT NULL,userdefinedid VARCHAR(255));
CREATE INDEX idx_messages_initdate ON messages(initdateutc);
CREATE INDEX idx_messages_contentmic ON messages(contentmic);
#
# MDN details
#
CREATE TABLE mdn(messageid VARCHAR(255) PRIMARY KEY,relatedmessageid VARCHAR(255),initdateutc TIMESTAMP,direction INTEGER,rawfilename VARCHAR(512), state INTEGER, signature INTEGER, senderid VARCHAR(255),receiverid VARCHAR(255), headerfilename VARCHAR(512),senderhost VARCHAR(255),useragent VARCHAR(255),mdntext OBJECT,dispositionstate VARCHAR(255),FOREIGN KEY(relatedmessageid)REFERENCES messages(messageid));
CREATE INDEX idx_mdn_initdate ON mdn(initdateutc);
#
#message log
#
CREATE TABLE messagelog( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,messageid VARCHAR(255),timestamputc TIMESTAMP,loglevel INTEGER,details OBJECT,FOREIGN KEY(messageid)REFERENCES messages(messageid));
CREATE INDEX idx_messagelog_messageid ON messagelog(messageid);
#
#payload 
#
CREATE TABLE payload( id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,messageid VARCHAR(255),originalfilename VARCHAR(512),payloadfilename VARCHAR(512),contentid VARCHAR(255),contenttype VARCHAR(255),FOREIGN KEY(messageid)REFERENCES messages(messageid));
CREATE INDEX idx_payload_messageid ON payload(messageid);
#
#statistic overview
#
CREATE TABLE statisticoverview(relationshipid VARCHAR(255)PRIMARY KEY,localstationid VARCHAR(255),partnerid VARCHAR(255),sendmessagecount INTEGER,receivedmessagecount INTEGER,sendwithfailurecount INTEGER,receivedwithfailurecount INTEGER,resetdateutc TIMESTAMP);
CREATE INDEX idx_statisticoverview_localstationid on statisticoverview(localstationid);
CREATE INDEX idx_statisticoverview_partnerid on statisticoverview(partnerid);
#
#statistic details
#
CREATE TABLE statisticdetails(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,localstation VARCHAR(255),partner VARCHAR(255),mdndate BIGINT,messageid VARCHAR(255),direction INTEGER,messagestate INTEGER);
CREATE INDEX idx_statisticdetails_localstation on statisticdetails(localstation);
CREATE INDEX idx_statisticdetails_partner on statisticdetails(partner);
CREATE INDEX idx_statisticdetails_mdndate on statisticdetails(mdndate);
CREATE INDEX idx_statisticdetails_direction on statisticdetails(direction);
CREATE INDEX idx_statisticdetails_messagestate on statisticdetails(messagestate);
CREATE INDEX idx_statisticdetails_mixed on statisticdetails(messagestate,localstation,partner,direction);
#
#system statistic
#
CREATE TABLE serverstatistic(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,counter INTEGER DEFAULT 0 NOT NULL,serverid VARCHAR(255) NOT NULL,direction INTEGER DEFAULT 0 NOT NULL,sign INTEGER DEFAULT 0 NOT NULL,encrypt INTEGER DEFAULT 0 NOT NULL,msgcompression INTEGER DEFAULT 0 NOT NULL,lastgood BIGINT DEFAULT 0 NOT NULL);
CREATE INDEX idx_serverstatistic_serverid on serverstatistic(serverid);
#
#CEM requests and responses go here
#
CREATE TABLE cem(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,initiatoras2id VARCHAR(255),receiveras2id VARCHAR(255),requestid VARCHAR(255),requestmessageid VARCHAR(255),responsemessageid VARCHAR(255),respondbydate BIGINT,requestmessageoriginated BIGINT,responsemessageoriginated BIGINT,category INTEGER,cemstate INTEGER,serialid VARCHAR(255),issuername VARCHAR(255),processed INT DEFAULT 0 NOT NULL,processdate BIGINT,reasonforrejection OBJECT);
#
#Send order queue - this table MUST NOT be cached as the max cache size for CACHED tables is 10MB - means it would be impossible
#to process files larger than 10MB or some parallel that add to the same size
#
CREATE TABLE sendorder(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,scheduletime BIGINT NOT NULL,nextexecutiontime BIGINT NOT NULL,sendorder OBJECT NOT NULL,orderstate INTEGER NOT NULL);
#
#Client module locks
#
CREATE TABLE modulelock(modulename VARCHAR(255) PRIMARY KEY,startlockmillis BIGINT NOT NULL,refreshlockmillies BIGINT NOT NULL,clientip VARCHAR(255) NOT NULL, clientid VARCHAR(255) NOT NULL,username VARCHAR(255) NOT NULL,clientpid VARCHAR(255) NOT NULL);
CREATE INDEX idx_refreshlockmillies ON modulelock(refreshlockmillies);
#
#Processing queue for partner events
#
CREATE TABLE processingeventqueue(messageid VARCHAR(255) PRIMARY KEY,mdnid VARCHAR(255),eventtype INTEGER NOT NULL,processtype INTEGER NOT NULL,initdate BIGINT NOT NULL,parameterlist VARCHAR(2048) NOT NULL);
CREATE INDEX idx_processingeventqueue_initdate ON processingeventqueue(initdate);
