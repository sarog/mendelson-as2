//$Header: /as2/sqlscript/config/Update46to47.java 2     24.08.21 9:12 Heller $
package sqlscript.config;

import de.mendelson.comm.as2.AS2ServerVersion;
import de.mendelson.comm.as2.database.IUpdater;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.util.prefs.Preferences;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 *
 * Update the database from version46 to version 47: move the properties system
 * to the database
 *
 * @author S.Heller
 * @version $Revision: 2 $
 * @since build 128
 */
public class Update46to47 implements IUpdater {

    /**
     * Store if this was a successfully operation
     */
    private boolean success = false;

    /**
     * Return if the update was successfully
     */
    @Override
    public boolean updateWasSuccessfully() {
        return (this.success);
    }

    /**
     * Starts the update process
     */
    @Override
    public void startUpdate(Connection connection) throws Exception {
        Statement statement = null;
        try {
            connection.createStatement();
            statement = connection.createStatement();
            statement.execute("CREATE TABLE serversettings(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,vkey VARCHAR(256)NOT NULL,vvalue VARCHAR(256)NOT NULL);");
            statement.execute("CREATE INDEX idx_serversettings_vkey ON serversettings(vkey);");
            this.moveServerPropertiesToDB(connection);
            this.success = true;
        } finally {
            if (statement != null) {
                statement.close();
            }
        }
    }

    /**
     * Stores all server related properties in the database
     */
    private void moveServerPropertiesToDB(Connection connection) throws Exception{

        final String DIR_MSG = "dirmsg";
        final String DIR_LOG = "dirlog";
        final String ASYNC_MDN_TIMEOUT = "asyncmdntimeout";
        final String KEYSTORE_HTTPS_SEND = "httpsendkeystore";
        final String KEYSTORE_HTTPS_SEND_PASS = "httpsendkeystorepass";
        final String KEYSTORE_PASS = "keystorepass";
        final String KEYSTORE = "keystore";
        final String AUTH_PROXY_USER = "proxyuser";
        final String AUTH_PROXY_PASS = "proxypass";
        final String AUTH_PROXY_USE = "proxyuseauth";
        final String AUTO_MSG_DELETE = "automsgdelete";
        final String AUTO_MSG_DELETE_OLDERTHAN_MULTIPLIER_S = "automsgdeleteolderthanmults";
        final String AUTO_MSG_DELETE_OLDERTHAN = "automsgdeleteolderthan";
        final String AUTO_MSG_DELETE_LOG = "automsgdeletelog";
        final String AUTO_STATS_DELETE = "autostatsdelete";
        final String AUTO_STATS_DELETE_OLDERTHAN = "autostatsdeleteolderthan";
        final String AUTO_LOGDIR_DELETE = "autologdirdelete";
        final String AUTO_LOGDIR_DELETE_OLDERTHAN = "autologdirdeleteolderthan";
        final String LOG_POLL_PROCESS = "logpollprocess";
        final String PROXY_HOST = "proxyhost";
        final String PROXY_PORT = "proxyport";
        final String PROXY_USE = "proxyuse";
        final String RECEIPT_PARTNER_SUBDIR = "receiptpartnersubdir";
        final String HTTP_SEND_TIMEOUT = "httpsendtimeout";
        final String SHOW_QUOTA_NOTIFICATION_IN_PARTNER_CONFIG = "showquotaconf";
        final String SHOW_HTTPHEADER_IN_PARTNER_CONFIG = "showhttpheaderconf";
        final String CEM = "cem";
        final String WRITE_OUTBOUND_STATUS_FILE = "outboundstatusfile";
        final String MAX_CONNECTION_RETRY_COUNT = "retrycount";
        final String MAX_OUTBOUND_CONNECTIONS = "maxoutboundconnections";
        final String CONNECTION_RETRY_WAIT_TIME_IN_S = "retrywaittime";
        final String DATASHEET_RECEIPT_URL = "datasheetreceipturl";

        String[] serverSideSettingsToMove = new String[]{
            DIR_MSG,
            DIR_LOG,
            ASYNC_MDN_TIMEOUT,
            KEYSTORE_HTTPS_SEND,
            KEYSTORE_HTTPS_SEND_PASS,
            KEYSTORE_PASS,
            KEYSTORE,
            AUTH_PROXY_USER,
            AUTH_PROXY_PASS,
            AUTH_PROXY_USE,
            AUTO_MSG_DELETE,
            AUTO_MSG_DELETE_OLDERTHAN_MULTIPLIER_S,
            AUTO_MSG_DELETE_OLDERTHAN,
            AUTO_MSG_DELETE_LOG,
            AUTO_STATS_DELETE,
            AUTO_STATS_DELETE_OLDERTHAN,
            AUTO_LOGDIR_DELETE,
            AUTO_LOGDIR_DELETE_OLDERTHAN,
            LOG_POLL_PROCESS,
            PROXY_HOST,
            PROXY_PORT,
            PROXY_USE,
            RECEIPT_PARTNER_SUBDIR,
            HTTP_SEND_TIMEOUT,
            SHOW_QUOTA_NOTIFICATION_IN_PARTNER_CONFIG,
            SHOW_HTTPHEADER_IN_PARTNER_CONFIG,
            CEM,
            WRITE_OUTBOUND_STATUS_FILE,
            MAX_CONNECTION_RETRY_COUNT,
            MAX_OUTBOUND_CONNECTIONS,
            CONNECTION_RETRY_WAIT_TIME_IN_S,
            DATASHEET_RECEIPT_URL
        };
        Preferences preferences = Preferences.userNodeForPackage(AS2ServerVersion.class);
        for (String key : serverSideSettingsToMove) {
            String value = preferences.get(key, "");
            //a value is defined for this property -> move it to the database
            if (value != "") {
                PreparedStatement statement = null;
                try{
                    statement = connection.prepareStatement("INSERT INTO serversettings(vkey,vvalue)VALUES(?,?)");
                    statement.setString(1, key);
                    statement.setString(2, value);
                    statement.executeUpdate();
                }
                finally{
                    if( statement != null ){
                        statement.close();
                    }
                }
            }
        }
        //clean up the settings in the preferences
        for (String key : serverSideSettingsToMove) {
            preferences.remove(key);
        }
    }
}
