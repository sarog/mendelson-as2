//$Header: /as2/sqlscript/config/Update44to45.java 2     3.09.20 9:21 Heller $
package sqlscript.config;

import de.mendelson.comm.as2.database.IUpdater;
import de.mendelson.util.security.Base64;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;

/*
 * Copyright (C) mendelson-e-commerce GmbH Berlin Germany
 *
 * This software is subject to the license agreement set forth in the license.
 * Please read and agree to all terms before using this software.
 * Other product and brand names are trademarks of their respective owners.
 */
/**
 *
 * Update the database from version 29 to version 30
 *
 * @author S.Heller
 * @version $Revision: 2 $
 * @since build 128
 */
public class Update44to45 implements IUpdater {

    /**
     * Store if this was a successfully operation
     */
    private boolean success = false;

    /**
     * Return if the update was successfully
     */
    @Override
    public boolean updateWasSuccessfully() {
        return (this.success);
    }

    /**
     * Starts the update process
     */
    @Override
    public void startUpdate(Connection connection) throws Exception {
        Statement statement = null;
        ResultSet result = null;
        try {
            statement = connection.createStatement();
            //create new partner event table        
            statement.execute("CREATE TABLE partnerevent(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,partnerid INTEGER,"
                    + "useonreceipt INTEGER DEFAULT 0 NOT NULL,"
                    + "useonsenderror INTEGER DEFAULT 0 NOT NULL,"
                    + "useonsendsuccess INTEGER DEFAULT 0 NOT NULL,"
                    + "typeonreceipt INTEGER DEFAULT 1 NOT NULL,"
                    + "typeonsenderror INTEGER DEFAULT 1 NOT NULL,"
                    + "typeonsendsuccess INTEGER DEFAULT 1 NOT NULL,"
                    + "parameteronreceipt VARCHAR(2048),"
                    + "parameteronsenderror VARCHAR(2048),"
                    + "parameteronsendsuccess VARCHAR(2048),"
                    + "FOREIGN KEY(partnerid)REFERENCES partner(id))");
            result = statement.executeQuery("SELECT * FROM partner");
            while (result.next()) {
                int partnerId = result.getInt("id");
                int usecommandonreceipt = result.getInt("usecommandonreceipt");
                int usecommandonsenderror = result.getInt("usecommandonsenderror");
                int usecommandonsendsuccess = result.getInt("usecommandonsendsuccess");
                String commandonreceipt = result.getString("commandonreceipt");
                String commandonsenderror = result.getString("commandonsenderror");
                String commandonsendsuccess = result.getString("commandonsendsuccess");
                this.insertEventEntry(connection, partnerId,
                        usecommandonreceipt, usecommandonsenderror, usecommandonsendsuccess,
                        commandonreceipt, commandonsenderror, commandonsendsuccess);                
            }
            //drop all unnecessary cols from the partner table
            statement.execute("ALTER TABLE partner DROP COLUMN usecommandonreceipt");
            statement.execute("ALTER TABLE partner DROP COLUMN usecommandonsenderror");
            statement.execute("ALTER TABLE partner DROP COLUMN usecommandonsendsuccess");
            statement.execute("ALTER TABLE partner DROP COLUMN commandonreceipt");
            statement.execute("ALTER TABLE partner DROP COLUMN commandonsenderror");
            statement.execute("ALTER TABLE partner DROP COLUMN commandonsendsuccess");
        } finally {
            if (result != null) {
                result.close();
            }
            if (statement != null) {
                statement.close();
            }
        }
        this.success = true;
    }

    /**
     * Inserts a new entry into the certificate table
     */
    private void insertEventEntry(Connection connection, int partnerId, int usecommandonreceipt,
            int usecommandonsenderror, int usecommandonsendsuccess, String commandonreceipt,
            String commandonsenderror, String commandonsendsuccess) throws Exception {
        PreparedStatement statement = null;
        try {
            statement = connection.prepareStatement(
                    "INSERT INTO partnerevent(partnerid,useonreceipt,useonsenderror,useonsendsuccess,"
                    + "typeonreceipt,typeonsenderror,typeonsendsuccess,"
                    + "parameteronreceipt,parameteronsenderror,parameteronsendsuccess)"
                    + "VALUES(?,?,?,?,?,?,?,?,?,?)");
            statement.setInt(1, partnerId);
            statement.setInt(2, usecommandonreceipt);
            statement.setInt(3, usecommandonsenderror);
            statement.setInt(4, usecommandonsendsuccess);
            statement.setInt(5, 1);
            statement.setInt(6, 1);
            statement.setInt(7, 1);
            if( commandonreceipt != null && commandonreceipt.trim().length() > 0 ){
                statement.setString(8, Base64.encode(commandonreceipt.getBytes(StandardCharsets.UTF_8)));
            }else{
                statement.setNull( 8, java.sql.Types.VARCHAR );
            }
            if( commandonsenderror != null && commandonsenderror.trim().length() > 0 ){
                statement.setString(9, Base64.encode(commandonsenderror.getBytes(StandardCharsets.UTF_8)));
            }else{
                statement.setNull( 9, java.sql.Types.VARCHAR );
            }
            if( commandonsendsuccess != null  && commandonsendsuccess.trim().length() > 0){
                statement.setString(10, Base64.encode(commandonsendsuccess.getBytes(StandardCharsets.UTF_8)));
            }else{
                statement.setNull( 10, java.sql.Types.VARCHAR );
            }
            statement.execute();
        } finally {
            if (statement != null) {
                statement.close();
            }
        }
    }

}
